// PLUGINS
apply plugin: 'com.android.application'

// ANDROID
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.example.pdred.practicaps_final"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:cardview-v7:23.1.0'

    // NEW adding dependencies related to cucumber
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.4'
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.4'
    testCompile group: 'info.cukes', name: 'cucumber-core', version: '1.2.4'

    // NEW commented unnecesary dependencies (by the time)
    //testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.4'
    //testCompile group: 'org.picocontainer', name: 'picocontainer', version: '2.10.2'

}

// NEW source sets
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

// NEW configuration
configurations {

}

// NEW definitions
def console = System.console()
def message, branch

// NEW in development ... TASKS

// TASK PULL
task pull {
    doFirst {
        println("PULLING ...")
    }
    exec {
        executable "git"
        args "pull", "origin", "master"
        ignoreExitValue true
    }
}

// TASK PUSH
    // COMPILE
task compile(dependsOn: ['assemble','test']) {
    doFirst {
        println("1. COMPILING ...")
    }
    doLast {
        println("Compiled.")
    }
}

    // ADD
task add(dependsOn: 'compile') {
    doFirst {
        println("2. ADDING ...")
    }
    doLast {
        exec {
            executable "git"
            args "add","."
        }
        println("Added.")
    }
}

    // COMMIT
task commit(dependsOn: 'add') {
    doFirst {
        println("3. COMMITING ...")
    }
    doLast {
        exec {
            ignoreExitValue true
            if(console) {
                message = console.readLine('> Mesage: ')
                executable "git"
                args "commit","-m",message
            } else {
                logger.error "#Error: cannot get console."
            }
        }
        println("Commited.")
    }
}

    // PUSH
task push(dependsOn: 'commit') {
    doFirst {
        println("4. PUSHING ...")
    }
    doLast {
        exec {
            ignoreExitValue true
            if(console) {
                branch = console.readLine('> Your branch: ')
                if(branch == "master") {
                    println("#Error: push to master is not available")
                } else {
                    executable "git"
                    args "push", "origin", branch
                }
            } else {
                logger.error "#Error: cannot get console."
            }
        }
        println("Pushed.")
    }
}

// TASK MERGE
task merge(dependsOn: ['pull','push']) {
    doFirst {
        println("MERGERING ...")
    }
    doLast {
        exec {
            println("Switch to branch master")
            executable "git"
            args "checkout", "master"
            branch = console.readLine('> Branch to merge: ')
            exec {
                println("Mergering branch " + branch + " into master branch")
                executable "git"
                args "merge", "--no-ff", branch
                exec {
                    println("Back to the branch " + branch)
                    executable "git"
                    args "push", "origin", "master"
                    exec {
                        executable "git"
                        args "checkout", branch
                    }
                }
            }
        }
    }
}

// TASK CUCUMBER
task cucumber () {

}